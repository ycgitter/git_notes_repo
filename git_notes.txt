Using diff - comparing working version with new version minimizes the amount of code to look at which helps spot where an error may have been introduced.

Keeping versions of code helps backtrack to versions that had particular features working.

To configure WinMergeU as difftool
Put this in c:\Users\Yeida\.gitconfig
    [diff]
        tool = winmerge
    [difftool "winmerge"]
        cmd = "'C:/Program Files/WinMerge-2.0.14/WinMergeU.exe'" -u -e "$LOCAL" "$REMOTE"
(git difftool doesn't work in cygwin window)

Commit - creates a new version
Id - unique id
Author
Date
Comment

Repository - multiple files
  Commits all files in repository (even if some files are not changed)


git log          See history of every commit (most recent on top which is the HEAD)

git diff id1 id2        Diff between two commit versions (compares all files in repo)
git diff id1 id2 fname  Diff between two commit versions (compares just fname)

git diff HEAD           Diff between working directory and current commit 
git diff                Diff between working directory and staging area 
git diff --staged       Diff between staging area and current commit
git difftool            Diff using difftool (configured for winmergeu)


git log --stat      Shows which files changed in each commit (added or removed code)

git clone      Cloning a repository

git config color.ui auto   Set color.ui config setting
git config --list          List config settings

git checkout <commit id>    to set all files in repository to that commit version
git checkout master         to get back to head version (?)

git init                Create a git repository. 
git status              Show which files have changed since last commit

git add                 Put current snapshot of file into the staging area 
git commit              Put all files in staging area into repository

git reset --hard        Reset Working Dir to current commit (any edits in WD will be lost)
                        Anything in Staging will be lost

git reset HEAD <file>   Undo a "git add <file>".  Edits to <file> will be kept in Working Dir

git branch              See existing branches
git branch <branch>     Create new branch names <branch> from current commit
git checkout <branch>   Put yourself on <branch> branch
git checkout -b <branch> Same as git branch <b> and git checkout <b> successively

git log --graph --oneline master branch1 branch2     Show master, b1,b2 branches
git log -n10 --graph --oneline --decorate --all      Show all branches (--decorate makes more clear)

git merge master <branch>   Merge <branch> into master (assuming master is current checkout)
                            Don't do this if there are uncommitted changes.
git branch -d coins     Deletes coins branch label (commits are still kept)
git show <commit-id>    Show diff between <commit> and parent of <commit>

git mergetool           Starts up kdiff3 to resolve merge conflicts (save to conflicted file)
git merge --abort       Can only be run if the merge resulted in conflicts. 
                        Aborts the merge process, and reverts to pre-merge state