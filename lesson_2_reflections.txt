running git init within a directory creates a git repository.  A .git directory contains metadata which git uses to track history.  Files still have to be 'added' to the repository through a staging process.  

Staging area should logically group changed files prior to a commit. Commit puts versioned file(s) into the repository.

There are three entities to keep in mind:
Working Directory - 
    This is typically the files associated with some commit level, 
    and then changes might be made, perhaps to fix a bug or to add a feature
Staging Area
    When some set of files has been changed and is ready to be versioned, these 
    files are grouped together into the staging area via git add
Repository
    The staged files are put into the repository via git commit


git diff            diff between Working Dir and Staging
git diff id1 id2    diff between Commit-id1 and Commit-id2
git diff --staged   diff between Staging and current commit

git reset --hard    Resets staging to empty, Resets working directory to current commit
                    All edits in Working Dir will be lost


BRANCHING
    A branch is a labeled commit version
    master is the default branch, created when you create a repository

    Checking out an older commit level results in a "detached" HEAD. This means you're
    looking at a commit without a branch name

    Checking out a branch (by label and not commit-id) puts you on that branch. Any commits 
    will automatically update the branch label to that commit. The last commit is called the 'tip' of that branch.  A commit level can have multiple branch labels, but future commits
    are applied only to the checked-out branch

    Use branches for side projects, releases and their bug fixes

MERGING
    git merge master coins (from master)
    git log --graph  will show branch point, merged commits, and merged commit point

MERGE CONFLICT
    git informs you of unmerged paths(Files).  
    The file will have HEAD===, master <<<, branch >>> lines added to the conflicted files
    Edit all files to resolve the conflicts, then do "git add <file(s)>"  and git commit

    git mergetool to use visual tool (currently configured for kdiff3 - save merged output to conflicted file)